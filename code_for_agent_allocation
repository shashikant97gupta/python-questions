# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X3uKyoRojXlT_3FGAioTTAIYG5QhRjJZ
"""

from datetime import date

role_list = ["spanish_speaker", "customer_handling", "call_handling", "support"]
agent_list = []
agent_list.append(  Agent(1, 1 ,date(2020, 6, 30), [3,3,5,5,4] ))
agent_list.append( Agent(2,0 ,date(2020, 6, 29), [2,4,4,4,5] ))
agent_list.append( Agent(3,1 ,date(2020, 6, 28), [4,5,3,4,5]))
agent_list.append( Agent(4, 1 ,date(2020, 6, 28), [5,5,4,5,4] ))
agent_list.append( Agent(5 , 0 ,date(2020, 6, 27), [2,5,4,5,4] ))

Allocated_Agent_is = AgentSelector(role_list , agent_list)
print(Allocated_Agent_is)

#we are defining function such that to select an agent for the project by its rating for each role he had previously worked.
def AgentSelector(role_list , agent_list):
  days_dict = {}
  allocating_role = input()
  if allocating_role in role_list:
    for i in range(len(agent_list)):
      if agent_list[i].is_available >0:
        days = agent_list[i].available_since - date.today()
        days_dict[agent_list[i]] = days

    days_dict = min(days_dict.values()) 
    res = [key for key in days_dict if days_dict[key] == temp]  # getting the agents having minimum number of days
    index_of_role = role_list.index(allocating_role)
    agent_id = 0
    maximum = 0 
    for i in res :
      if i.rating[index_of_role] > maximum:
        maximum = i.rating[index_of_role]
        agent_id = i.id

    return agent_i 
  else:
    return null

"""Supposing that an agent is performing multile roles but for every role that agent performs their is ratings given to the agent .

eg: {spanish_speaker : 3, customer_handling : 4, call_handling : 5, sales : 5, support : 4}

we are also considering that agent is only allocated for a single role.
"""

# we are creating a class that contains the agent basic information 
class Agent:
  def __init__(self, id, is_available, available_since, rating_list):
    self.id = id
    self.is_available = is_available
    self.available_since = available_since
    self.rating = rating_list

  def get_rating(self):
      return self.rating
